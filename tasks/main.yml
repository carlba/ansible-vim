---
- name: Ensure apt cache is updated on Debian based OSes
  become: true
  apt: update_cache=true cache_valid_time=3600
  when: is_privileged_user and ansible_os_family == 'Debian'

- name: Ensure base dependencies are installed
  become: "{{ (ansible_os_family in ['Darwin']) | ternary('false', 'true') }}"
  package: name={{item}}
  with_items:
    - git
    - make
    - gcc
  when: is_privileged_user

- include: ubuntu.yml
  when: is_privileged_user and ansible_distribution in ['Ubuntu']

- name: 'Ensure {{ editor }} is the latest version'
  become: "{{ (ansible_os_family in ['Darwin']) | ternary('false', 'true') }}"
  package: name={{ editor }} state=latest

- name: 'Install neovim Python library'
  become: "{{ (ansible_os_family in ['Darwin']) | ternary('false', 'true') }}"
  pip:
    name: neovim
    executable: pip
    extra_args: --upgrade
  when: (is_privileged_user or ansible_os_family in ['Darwin']) and editor == 'neovim'

- name: 'Ensure {{ editor }} config directory exists'
  file:
    path: '{{ vim_config_path }}'
    recurse: true
    state: directory

# TODO: Make this a bit cleaner
- name: Retrieve result of vim-bootstrap post request
  uri:
    url: 'http://vim-bootstrap.com/generate.vim'
    method: POST
    return_content: true
    body_format: form-urlencoded
    body:
      langs: ['javascript', 'php', 'html', 'ruby', 'python']
      editor: '{{ editor_command }}'
    status_code: 200
  register: uri_result

- name: Ensure output of vim-bootstrap.com generate request is stored to init file
  copy:
    content: '{{ uri_result.content }}'
    dest: '{{ (editor == "neovim") | ternary(ansible_env.HOME ~ "/.config/nvim/init.vim", ansible_env.HOME ~ "/.vimrc") }}'

- name: Add custom plugins
  blockinfile:
    dest: '{{ (editor == "neovim") | ternary(ansible_env.HOME ~ "/.config/nvim/local_bundles.vim", ansible_env.HOME ~ "/.vimrc.local.bundles") }}'
    create: true
    marker: ' " {mark} ANSIBLE MANAGED BLOCK'
    block: |
      Plug 'vim-scripts/Zenburn'

- name: Ensure neovim plugins are installed
  shell: 'nvim +PlugInstall +qall --headless'
  register: nvim_plugins_install_command
  changed_when: nvim_plugins_install_command.stderr != ""
  failed_when: nvim_plugins_install_command.rc !=0 or "Error" in nvim_plugins_install_command.stderr
  when: editor == 'neovim'

- name: Ensure vim plugins are installed
  shell: 'echo -n "\n" | vim +PlugInstall +qall'
  register: vim_plugins_install_command
  changed_when: '"Cloning into" in vim_plugins_install_command.stdout'
  failed_when: vim_plugins_install_command.rc !=0 or "Error" in vim_plugins_install_command.stderr
  when: editor == 'vim'

# nocompatible prevents home and end buttons from inserting H and F characters
- name: 'Apply customized {{ editor }} settings'
  blockinfile:
    dest: '{{ (editor == "neovim") | ternary(ansible_env.HOME ~ "/.config/nvim/local_init.vim", ansible_env.HOME ~ "/.vimrc.local") }}'
    create: true
    marker: ' " {mark} ANSIBLE MANAGED BLOCK'
    block: |
      silent! colorscheme zenburn
      set nocompatible
      let g:airline_theme = 'lucius'
      autocmd FileType python setlocal colorcolumn=99
      set guicursor=
